@using ClubSite.src.Models;
@using Examine;
@using System.Globalization
@using Umbraco.Cms.Core.Models;
@using Umbraco.Cms.Core.Models.Blocks;
@using Umbraco.Cms.Core.PublishedCache;
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@inject IExamineManager examineManager
@inject ITagQuery tagQuery
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    Layout = "_master.cshtml";
    var childList = Model?.Children.Where(x => x.IsVisible());
    var directories = Model?.Value<Umbraco.Cms.Web.Common.PublishedModels.Dictionaries>("directories");
    SmidgeHelper.RequiresJs(new Smidge.Models.JavaScriptFile("~/scripts/catalog.js"));
    var pageSize = 3;
    var query = Context.Request.Query["query"];
    var catalog = Model.Root().FirstChildOfType("catalog");
    //var resultSearch = SiteHelpers.SearchProduct(examineManager, Umbraco, new SearchProductReq
    //		{
    //               ParentId = catalog.Id,
    //			CurrentCount = 0,
    //			PageSize = pageSize,
    //			Title = query
    //		});

}
@functions {
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}
<section class="block block--inner _noMarginBottom" style="--veil: 0;">
    <div class="block__content">
        <div class="block__header-row">
            <h1 class="block__title">@(Model.HasValue("title") ? Model.Value("title") : Model.Name())</h1>
            @if (childList?.Count() > 0)
            {
                <div class="block__titlecount">@childList?.Count()</div>
            }
        </div>
    </div>
</section>
@if (childList !=null && childList?.Count() > 0)
{
    @if (directories != null)
    {
    <div class="block block--inner filters _noMarginBottom">
        <div class="block__content">
            <div class="filters__search">
                <form class="searchPage__form" action="@Model.Url()" method="get">
                    <button type="submit" class="searchPage__btn">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 16" width="16">
                                <path fill="transparent" fill-opacity=".01" d="M0 0h16v16H0z" />
                                <path fill="currentColor" fill-opacity=".616" fill-rule="evenodd" d="M10.667 6.934a3.733 3.733 0 1 1-7.467 0 3.733 3.733 0 0 1 7.467 0Zm-.738 3.75a4.8 4.8 0 1 1 .754-.754l3.027 3.027a.534.534 0 0 1-.754.754L9.93 10.684Z" clip-rule="evenodd" />
                            </svg>
                    </button>
                    <label class="searchPage__label" for="@Model.Key">
                        <input id="@Model.Key" type="text" name="title" value="@(query)" placeholder="Введите поисковый запрос">
                    </label>

                </form>
            </div>
            <div class="filters__grid">
                @foreach (var item in directories.Children)
                {
                    @if (item.Children.Count() > 0)
                    {
                        <div class="select-wrapper filter__category">
                            <select name="@item.UrlSegment" id="@item.Value("dictionaryId")">
                                <option value="all">@item.Value("defaultField")</option>
                                @foreach (var elem in item.Children)
                                {
                                    <option value="@elem.UrlSegment">@elem.Name</option>
                                }
                            </select>
                        </div>
                    }
                }
            </div>
            <div class="filters__search-result">
                По запросу <span class="queryValye">спорт</span> найдено <span class="queryCount">42</span> вариант(а)
            </div>
        </div>
    </div>
        
    }
    <section class="winnerCatlog block _noMarginBottom" style="--veil: 0;">
        <div class="block__content">
            <div class="winnerCatlog__grid">
                @foreach (var card in childList)
                {
                    var title = card.HasValue("title") ? Html.Raw(card.Value("title")) : Html.Raw(card.Name);
                    <div class="winnerCatlog__item">
                        <a href="@card.Url()" class="winnerCatlog__link" id="@card.UrlSegment@card.Id">
                            <div class="winnerCatlog__pic">
                                <img src="@(card.Value<MediaWithCrops>("cover")?.Url())" loading="lazy" alt="@title" width="380"/>
                            </div>
                            <div class="winnerCatlog__body">
                                <div class="winnerCatlog__title">@title</div>
                               
                                <div class="winnerCatlog__summ">@{RenderNumber(card.Value<int>("grantSumm").ToString());}@Html.Raw("&nbsp;&#8381;")</div>
                            </div>
                        </a>
                    </div>
                    
                }
            </div>
            <div class="pagination">А тутЪ должна бы быть пагинация, но мы ее делаем!</div>
        </div>
    </section>
}
else
{
    <div class="block__content">
        <div class="block__title">Пока тут ничего нет. Но скоро появиться :)</div>
    </div>
}

@{
    var contentBlocks = Model.Value<Umbraco.Cms.Core.Models.Blocks.BlockListModel>("contentBlocks")!;
    if (contentBlocks != null)
    {
        var index = 0;
        ViewData["page"] = Model;
        foreach (var block in contentBlocks)
        {
            ViewData["blockIndex"] = index++;
            ViewData["settings"] = block.Settings;
            @await Html.PartialAsync("blocks/" + block.Content.ContentType.Alias, block.Content)
        }
    }
}

@{
    void RenderNumber(String num)
    {
        if (int.TryParse(num, out int number))
        {
            double doubleNumber = (double)number;
            CultureInfo culture = new CultureInfo("ru-RU");
            culture.NumberFormat.NumberGroupSeparator = " ";
            string formattedNumber = doubleNumber.ToString("N0", culture);
            @formattedNumber
            ;
        }
    }
}