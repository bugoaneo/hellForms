@model IPublishedElement
@using System.Net
@{
    <script src="https://www.google.com/recaptcha/api.js?render=6LfgAqYpAAAAACGFBVfjEz6GZxIiHt26dj4KU4w-"></script>
    <script src="https://smartcaptcha.yandexcloud.net/captcha.js" defer></script>
    if (!(Model.ContentType.Alias == "cFormRequest" || Model.ContentType.Alias == "cFormAndContent"))
    {
        //throw new Exception("Вероятно, несовместимый тип модели данных формы");
    }
    var umbracoHelper = (Umbraco.Cms.Web.Common.UmbracoHelper?)ViewData["UmbracoHelper"];
    var page = (IPublishedContent?)ViewData["page"];
    var formTemplate = (Umbraco.Cms.Web.Common.PublishedModels.FormTemplate?)Model.Value<IPublishedContent>("formTemplate");

    //SiteHelpers.PushFileToBundle(Context, new Smidge.Models.JavaScriptFile("~/scripts/customform.js"));

    var buttonText = Model.Value<string>("submitCaption");
    if (string.IsNullOrEmpty(buttonText)) { buttonText = "Отправить"; }

    var itemNo = (int)(Context.Items["formCounter"] ?? 0);
    Context.Items["formCounter"] = itemNo + 1;



    #region Helper Methods
    string GetColWidthClass(int colspan)
    {
        string res = string.Empty;
        switch (colspan)
        {
            case 0: res = "tb-grid-md-12"; break;
            case 1: res = "tb-grid-md-1"; break;
            case 2: res = "tb-grid-md-2"; break;
            case 3: res = "tb-grid-md-3"; break;
            case 4: res = "tb-grid-md-4"; break;
            case 5: res = "tb-grid-md-5"; break;
            case 6: res = "tb-grid-md-6"; break;
            case 7: res = "tb-grid-md-7"; break;
            case 8: res = "tb-grid-md-8"; break;
            case 9: res = "tb-grid-md-9"; break;
            case 10: res = "tb-grid-md-10"; break;
            case 11: res = "tb-grid-md-11"; break;
        }
        return res;
    }
    #endregion

    #region Renderers
    void RenderSplitter(int colSpan)
    {
        <div class="@GetColWidthClass(colSpan)"></div>
    }

    void RenderSimplestString(NcSimpleFormProperty field)
    {
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label for="@field.PropertyAlias">@field.PropertyName</label>
            <input class="input @field.CssClass" name="@field.PropertyAlias" id="@field.PropertyAlias" type="text" placeholder="@field.PropertyName" data-val="true"
            @Html.Raw(!string.IsNullOrEmpty(field.InputMask) ? "data-mask=\"" + field.InputMask + "\"" : string.Empty)
            @(field.PropertyRequired ? "required" : string.Empty)
            @Html.Raw(!string.IsNullOrEmpty(field.PropertyMask) ? "data-val-regex=\"error\" data-val-regex-pattern=\"" + WebUtility.HtmlEncode(field.PropertyMask) + "\"" : "")>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>
    }

    void RenderPhone(NcSimpleFormProperty field)
    {
        var mask = string.IsNullOrEmpty(field.InputMask) ? umbracoHelper.GetDictionaryValue("validate-phone-mask") : field.InputMask;
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label for="@field.PropertyAlias">@field.PropertyName</label>
            <input class="input @field.CssClass" name="@field.PropertyAlias" id="@field.PropertyAlias" type="tel" inputmode="tel" placeholder="@field.PropertyName" data-val="true"
            @Html.Raw(!string.IsNullOrEmpty(mask) ? "data-mask=\"" + mask + "\"" : string.Empty)
            @(field.PropertyRequired ? "required" : string.Empty)
            @Html.Raw(!string.IsNullOrEmpty(field.PropertyMask) ? "data-val-regex=\"error\" data-val-regex-pattern=\"" + WebUtility.HtmlEncode(field.PropertyMask) + "\"" : "")>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>
    }
    void RenderEmail(NcSimpleFormProperty field)
    {
        var mask = string.IsNullOrEmpty(field.InputMask) ? umbracoHelper.GetDictionaryValue("validate-email-mask") : field.InputMask;
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label for="@field.PropertyAlias">@field.PropertyName</label>
            <input class="input @field.CssClass" name="@field.PropertyAlias" type="email" id="@field.PropertyAlias" inputmode="email" placeholder="@field.PropertyName" data-val="true"
            @Html.Raw(!string.IsNullOrEmpty(mask) ? "data-mask=\"" + mask + "\"" : string.Empty)
            @(field.PropertyRequired ? "required" : string.Empty)
            @Html.Raw(!string.IsNullOrEmpty(field.PropertyMask) ? "data-val-regex=\"error\" data-val-regex-pattern=\"" + WebUtility.HtmlEncode(field.PropertyMask) + "\"" : "")>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>
    }
    void RenderEmailAndPhone(NcSimpleFormProperty field)
    {
        var maskEmail = "^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$";
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label for="@(field.PropertyAlias)Mail">Ваша почта</label>
            <input class="input @field.CssClass" name="@field.PropertyAlias" type="email" id="@(field.PropertyAlias)Mail" inputmode="email" placeholder="Ваша почта" data-val="true" required="" 
            data-val-regex="error" pattern=@maskEmail>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>
        
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label for="@(field.PropertyAlias)Tel">Ваш телефон</label>
            <input class="input @field.CssClass" name="@field.PropertyAlias" type="tel" id="@(field.PropertyAlias)Tel" inputmode="tel" placeholder="Ваш телефон" data-val="true"
            @(field.PropertyRequired ? "required" : string.Empty)
            @Html.Raw(!string.IsNullOrEmpty(field.PropertyMask) ? "data-val-regex=\"error\" data-val-regex-pattern=\"" + WebUtility.HtmlEncode(field.PropertyMask) + "\"" : "")>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>

    }
    void RenderCheckbox(NcSimpleFormProperty field)
    {
        var id = "form-" + Context.Items["formCounter"] + field.PropertyAlias;
        <div class="form-group checkbox-group @GetColWidthClass(field.PropertyRenderWidth)">
            <input class="input-checkbox__body @field.CssClass" name="@field.PropertyAlias" type="checkbox" id="@id" @(field.Selected ? "checked " : string.Empty) data-val="true"
            @(field.PropertyRequired ? "required" : string.Empty)
            @Html.Raw(!string.IsNullOrEmpty(field.PropertyMask) ? "data-val-regex=\"error\" data-val-regex-pattern=\"" + WebUtility.HtmlEncode(field.PropertyMask) + "\"" : "")>

            <label class="input-checkbox__label" for="@id">
                <span class="input-checkbox__text">@Html.Raw(field.PropertyName)</span>
            </label>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>
    }


    void RenderDate(NcSimpleFormProperty field)
    {
        var mask = string.IsNullOrEmpty(field.InputMask) ? umbracoHelper.GetDictionaryValue("validate-date-mask") : field.InputMask;
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label>@field.PropertyName</label>
            <input class="input @field.CssClass" name="@field.PropertyAlias" type="date" inputmode="numeric" placeholder="@field.PropertyName" data-val="true"
            @Html.Raw(!string.IsNullOrEmpty(mask) ? "data-mask=\"" + mask + "\"" : string.Empty)
            @(field.PropertyRequired ? "required" : string.Empty)
            @Html.Raw(!string.IsNullOrEmpty(field.PropertyMask) ? "data-val-regex=\"error\" data-val-regex-pattern=\"" + WebUtility.HtmlEncode(field.PropertyMask) + "\"" : "")>
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
        </div>
    }
    void RenderTextarea(NcSimpleFormProperty field)
    {
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label>@field.PropertyName</label>
            <textarea class="input @field.CssClass" name="@field.PropertyAlias" placeholder="@field.PropertyName" data-val="true"
            @(field.PropertyRequired ? "required" : string.Empty)></textarea>
        </div>
    }
    void RenderCaptcha(NcSimpleFormProperty field)
    {

        <div style="height: 0px;order: 1;" id="captcha-container" class="g-smart-captcha"></div>

    }
    void RenderYandexCaptcha(NcSimpleFormProperty field)
    {

    <div class="row__full _center">
        <div style="height: 100px"
             id="captcha-container"
             class="smart-captcha"
             data-sitekey="ysc1_hSr3PsRkkrScHGRy0X6YR1mRY0xUajzxeu69LdZw42298173">
                <input type="hidden" id="ya-recaptcha-response" name="ya-recaptcha-response" required>
        </div>

    </div>
    }
    void RenderFile(NcSimpleFormProperty field)
    {
        var id = "form-" + Context.Items["formCounter"] + field.PropertyAlias;
        <div class="form-group @GetColWidthClass(field.PropertyRenderWidth)">
            <label class="loadFile" for="@id">
                <span class="loadFile__icon">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path d="M15.22 3.84a4.725 4.725 0 0 0-6.673 0L3.449 8.934a.176.176 0 0 0-.05.125c0 .046.017.091.05.125l.72.72a.176.176 0 0 0 .249 0l5.098-5.093a3.328 3.328 0 0 1 2.369-.98 3.32 3.32 0 0 1 2.367.98c.633.632.98 1.474.98 2.367 0 .894-.347 1.734-.98 2.367l-5.195 5.193-.842.842a2.02 2.02 0 0 1-2.854 0c-.38-.38-.59-.887-.59-1.426 0-.539.21-1.045.59-1.425l5.155-5.153a.69.69 0 0 1 .486-.201h.002c.184 0 .353.072.482.201a.68.68 0 0 1 0 .969l-4.213 4.209a.176.176 0 0 0-.05.125c0 .047.017.092.05.125l.721.72a.176.176 0 0 0 .248 0l4.211-4.21a2.04 2.04 0 0 0 .602-1.453c0-.55-.215-1.067-.602-1.454a2.061 2.061 0 0 0-2.91 0l-.5.502-4.652 4.65a3.363 3.363 0 0 0-.993 2.397 3.384 3.384 0 0 0 3.389 3.383c.867 0 1.734-.33 2.395-.99l6.039-6.035a4.696 4.696 0 0 0 1.38-3.336 4.681 4.681 0 0 0-1.38-3.338Z" fill="currentColor" />
                    </svg>
                </span>
                <span class="loadFile__title">@field.PropertyName</span>
                @*<span class="loadFile__statusIcon"></span>*@
            </label>
            <input data-val="true" id="@id" name="@field.PropertyAlias" class="loadInput" type="file" multiple @(field.PropertyRequired ? "required" : string.Empty) />
            <span class="field-validation-valid" data-valmsg-for="@field.PropertyAlias">@SiteHelpers.GetFormFieldErrorText(umbracoHelper, field.ErrorDescription)</span>
            <div class="files-names"></div>
        </div>
    }

    #endregion

    <form id="form-@itemNo" data_valmsg_summary="true" class="custom-form" action="/umbraco/surface/CustomForm/SubmitCustomForm" method="post" data-ajax="true">
        <div class="tb-grid tb-grid-gap-20">
            <input type="hidden" id="g-recaptcha-response" name="g-recaptcha-response" />
            @Html.AntiForgeryToken()
            @foreach (var listItem in formTemplate.CustomForm)
            {
                var field = listItem.Content;

                if (field.ContentType.Alias == "ncSimpleFormProperty")
                {
                    var fieldTyped = (Umbraco.Cms.Web.Common.PublishedModels.NcSimpleFormProperty)field;
                    switch (fieldTyped.PropertyType)
                    {
                        case "Строка текста":
                            RenderSimplestString(fieldTyped);
                            break;
                        case "Телефон":
                            RenderPhone(fieldTyped);
                            break;
                        case "Email":
                            RenderEmail(fieldTyped);
                            break;
                        case "Дата":
                            RenderDate(fieldTyped);
                            break;
                        case "Флажок":
                            RenderCheckbox(fieldTyped);
                            break;
                        case "Многострочный текст":
                            RenderTextarea(fieldTyped);
                            break;
                        case "Капча":
                            RenderCaptcha(fieldTyped);
                            break;
                        case "Яндекс капча":
                            RenderYandexCaptcha(fieldTyped);
                            break;
                        case "Вложение":
                            RenderFile(fieldTyped);break;
                        case
                            "Почта или телефон":
                            RenderEmailAndPhone(fieldTyped); break;
                        default:
                            <div>@fieldTyped.PropertyType</div>
                            break;
                    }
                }
                else if (field.ContentType.Alias == "ncSimpleFormSplitter")
                {
                    RenderSplitter(((NcSimpleFormSplitter)field).PropertyRenderWidth);
                }
            }
            <input type="hidden" name="formId" value="@formTemplate.Id" />
            <input type="hidden" name="pageId" value="@(page.Id)" />
            <input type="hidden" name="formTag" value="@formTemplate.FormTag" />
        </div>

        <div class="form-footer">
            <button type="submit" class="primary-button" style="display:none">^</button>
            <button type="button" class="btn button formSubmit-@(page.Id)" onclick='CustomForm.fixupUploads(this)'>@buttonText</button>
        </div>
        <div class="row__full">
            <div class="validation-summary-errors"><div></div><ul></ul></div>
        </div>

    </form>
}