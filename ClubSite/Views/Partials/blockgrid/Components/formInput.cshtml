@using Umbraco.Extensions
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<Umbraco.Cms.Core.Models.Blocks.BlockGridItem>

@{
    void RenderSimplestString()
    {
        <div class="form-group @Model.Content.Value("cssClass")">
            @if (!Model.Content.Value<bool>("hideLabel") && Model.Content.HasValue("propertyName"))
            {
                <label class="form-label" for="@Model.Content.Value("propertyAlias")">@Model.Content.Value("propertyName")</label>
            }
            <input class="input" name="@Model.Content.Value("propertyAlias")" id="@Model.Content.Value("propertyAlias")" type="text" placeholder="@Model.Content.Value("inputPlaceholder")"
            @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty)>
            <span class="field-validation-valid"></span>
        </div>
    }


    void RenderNumber()
    {
        <div class="form-group @Model.Content.Value("cssClass")">
            @if (!Model.Content.Value<bool>("hideLabel") && Model.Content.HasValue("propertyName"))
            {
                <label class="form-label" for="@Model.Content.Value("propertyAlias")">@Model.Content.Value("propertyName")</label>
            }
            <input class="input" name="@Model.Content.Value("propertyAlias")" id="@Model.Content.Value("propertyAlias")" type="number" inputmode="numeric" placeholder="@Model.Content.Value("inputPlaceholder")"
            @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty)>
            <span class="field-validation-valid"></span>
        </div>
    }

    void RenderPhone()
    {
        <div class="form-group @Model.Content.Value("cssClass")">
            @if (!Model.Content.Value<bool>("hideLabel") && Model.Content.HasValue("propertyName"))
            {
                <label class="form-label" for="@Model.Content.Value("propertyAlias")">@Model.Content.Value("propertyName")</label>
            }
            <input class="input" name="@Model.Content.Value("propertyAlias")" id="@Model.Content.Value("propertyAlias")" type="tel" inputmode="tel" placeholder="@Model.Content.Value("inputPlaceholder")"
            @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty)>
            <span class="field-validation-valid"></span>
        </div>
    }

    void RenderEmail()
    {
        <div class="form-group @Model.Content.Value("cssClass")">
            @if (!Model.Content.Value<bool>("hideLabel") && Model.Content.HasValue("propertyName"))
            {
                <label class="form-label" for="@Model.Content.Value("propertyAlias")">@Model.Content.Value("propertyName")</label>
            }
            <input class="input" name="@Model.Content.Value("propertyAlias")" id="@Model.Content.Value("propertyAlias")" type="email" inputmode="email" placeholder="@Model.Content.Value("inputPlaceholder")"
            @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty)>
            <span class="field-validation-valid"></span>
        </div>
    }

    void RenderDate()
    {

        <div class="form-group @Model.Content.Value("cssClass")">
            @if (!Model.Content.Value<bool>("hideLabel") && Model.Content.HasValue("propertyName"))
            {
                <label class="form-label" for="@Model.Content.Value("propertyAlias")">@Model.Content.Value("propertyName")</label>
            }
            <input class="input" name="@Model.Content.Value("propertyAlias")" id="@Model.Content.Value("propertyAlias")" type="date" inputmode="numeric" placeholder="@Model.Content.Value("inputPlaceholder")"
            @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty)>
            <span class="field-validation-valid"></span>
        </div>
    }

    void RenderCheckbox()
    {
        var id = "form-" + @Model.Content.Value("propertyAlias");
        <div class="form-group input-row @Model.Content.Value("cssClass")">
            <input type="checkbox" class="input-row__body" id="@id" name="@Model.Content.Value("propertyAlias")" @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty) @(Model.Content.Value<bool>("selected") ? "checked" : string.Empty)>
            <label class="input-row__label" for="@id">
                <span class="input-row__text">@Html.Raw(Model.Content.Value("propertyName"))</span>
            </label>
        </div>
    }
    void RenderTextarea()
    {
        <div class="form-group @Model.Content.Value("cssClass")">
            @if (!Model.Content.Value<bool>("hideLabel") && Model.Content.HasValue("propertyName"))
            {
                <label class="form-label" for="@Model.Content.Value("propertyAlias")">@Model.Content.Value("propertyName")</label>
            }
            <div class="textareaWrapper">
                <textarea class="input" name="@Model.Content.Value("propertyAlias")" placeholder="@Model.Content.Value("inputPlaceholder")" id="@Model.Content.Value("propertyAlias")"
                @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty) maxlength="@Model.Content.Value("maxLenght")"></textarea>
                <div class="textarea-char-counter">0/@Model.Content.Value("maxLenght")</div>
            </div>
        </div>
    }

    void RenderFile()
    {
        var id = "form-" + Model.Content.Value("propertyAlias");
        <div class="form-group ">
            <label class="loadFile" for="@id">
                <span class="loadFile__icon">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path d="M15.22 3.84a4.725 4.725 0 0 0-6.673 0L3.449 8.934a.176.176 0 0 0-.05.125c0 .046.017.091.05.125l.72.72a.176.176 0 0 0 .249 0l5.098-5.093a3.328 3.328 0 0 1 2.369-.98 3.32 3.32 0 0 1 2.367.98c.633.632.98 1.474.98 2.367 0 .894-.347 1.734-.98 2.367l-5.195 5.193-.842.842a2.02 2.02 0 0 1-2.854 0c-.38-.38-.59-.887-.59-1.426 0-.539.21-1.045.59-1.425l5.155-5.153a.69.69 0 0 1 .486-.201h.002c.184 0 .353.072.482.201a.68.68 0 0 1 0 .969l-4.213 4.209a.176.176 0 0 0-.05.125c0 .047.017.092.05.125l.721.72a.176.176 0 0 0 .248 0l4.211-4.21a2.04 2.04 0 0 0 .602-1.453c0-.55-.215-1.067-.602-1.454a2.061 2.061 0 0 0-2.91 0l-.5.502-4.652 4.65a3.363 3.363 0 0 0-.993 2.397 3.384 3.384 0 0 0 3.389 3.383c.867 0 1.734-.33 2.395-.99l6.039-6.035a4.696 4.696 0 0 0 1.38-3.336 4.681 4.681 0 0 0-1.38-3.338Z" fill="currentColor" />
                    </svg>
                </span>
                <span class="loadFile__title">@Model.Content.Value("propertyName")</span>
                @*<span class="loadFile__statusIcon"></span>*@
            </label>
            <input data-val="true" id="@id" name="@Model.Content.Value("propertyAlias")" class="loadInput" type="file" multiple @(Model.Content.Value<bool>("propertyRequired") ? "required" : string.Empty) />
            <span class="field-validation-valid"></span>
            <div class="files-names"></div>
        </div>
    }
    var fieldTyped = Model.Content.Value("propertyType");

    switch (fieldTyped)
    {
        case "Строка текста":
            RenderSimplestString();
            break;
        case "Телефон":
            RenderPhone();
            break;
        case "Email":
            RenderEmail();
            break;
        case "Дата":
            RenderDate();
            break;
        case "Флажок":
            RenderCheckbox();
            break;
        case "Многострочный текст":
            RenderTextarea();
            break;
        case "Вложение":
            RenderFile();
            break;
        case "Числовой":
            RenderNumber();
            break;
        default:
            <div>Не выбран тип инпута</div>
            break;
    }
}

